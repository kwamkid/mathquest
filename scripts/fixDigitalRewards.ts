// scripts/fixDigitalRewards.ts
// Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Digital Rewards ‡∏à‡∏≤‡∏Å APPROVED ‡πÄ‡∏õ‡πá‡∏ô DELIVERED

import { 
  collection, 
  query, 
  where, 
  getDocs, 
  updateDoc, 
  doc,
  getDoc,
  runTransaction 
} from 'firebase/firestore';
import { db } from '@/lib/firebase/client';
import { RedemptionStatus, RewardType } from '@/types/avatar';

// Function ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export async function fixDigitalRewardsStatus() {
  console.log('üîß Starting fix for digital rewards status...');
  
  try {
    // ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å redemptions ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô digital ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ APPROVED
    const digitalTypes = [
      RewardType.AVATAR,
      RewardType.ACCESSORY, 
      RewardType.TITLE_BADGE,
      RewardType.BADGE,
      RewardType.BOOST
    ];
    
    let totalFixed = 0;
    
    for (const rewardType of digitalTypes) {
      console.log(`\nüì¶ Processing ${rewardType} rewards...`);
      
      const q = query(
        collection(db, 'redemptions'),
        where('rewardType', '==', rewardType),
        where('status', '==', RedemptionStatus.APPROVED)
      );
      
      const snapshot = await getDocs(q);
      console.log(`Found ${snapshot.size} ${rewardType} redemptions to fix`);
      
      for (const redemptionDoc of snapshot.docs) {
        const redemption = redemptionDoc.data();
        
        try {
          await runTransaction(db, async (transaction) => {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô DELIVERED
            transaction.update(doc(db, 'redemptions', redemptionDoc.id), {
              status: RedemptionStatus.DELIVERED,
              updatedAt: new Date().toISOString(),
              adminNotes: 'Fixed by script: Digital reward auto-delivered'
            });
            
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô BOOST ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° activatedAt ‡πÅ‡∏•‡∏∞ expiresAt
            if (rewardType === RewardType.BOOST) {
              const now = new Date();
              const expiresAt = new Date(now.getTime() + (redemption.boostDuration || 60) * 60000);
              
              transaction.update(doc(db, 'redemptions', redemptionDoc.id), {
                activatedAt: now.toISOString(),
                expiresAt: expiresAt.toISOString()
              });
            }
          });
          
          console.log(`‚úÖ Fixed redemption ${redemptionDoc.id} (${rewardType})`);
          totalFixed++;
          
        } catch (error) {
          console.error(`‚ùå Failed to fix ${redemptionDoc.id}:`, error);
        }
      }
    }
    
    console.log(`\nüéâ Fixed total: ${totalFixed} digital rewards`);
    return { success: true, fixed: totalFixed };
    
  } catch (error) {
    console.error('üí• Error in fix script:', error);
    return { success: false, error: error.message };
  }
}

// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
export async function checkDigitalRewardsStatus() {
  console.log('üîç Checking digital rewards status...');
  
  const digitalTypes = [
    RewardType.AVATAR,
    RewardType.ACCESSORY, 
    RewardType.TITLE_BADGE,
    RewardType.BADGE,
    RewardType.BOOST
  ];
  
  const report: Record<string, number> = {};
  
  for (const rewardType of digitalTypes) {
    const q = query(
      collection(db, 'redemptions'),
      where('rewardType', '==', rewardType),
      where('status', '==', RedemptionStatus.APPROVED)
    );
    
    const snapshot = await getDocs(q);
    report[rewardType] = snapshot.size;
  }
  
  console.log('üìä Digital rewards stuck at APPROVED status:');
  Object.entries(report).forEach(([type, count]) => {
    if (count > 0) {
      console.log(`  ${type}: ${count} items`);
    }
  });
  
  const total = Object.values(report).reduce((sum, count) => sum + count, 0);
  console.log(`üìã Total items to fix: ${total}`);
  
  return report;
}

// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å Console (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
export async function runFixFromConsole() {
  console.log('üöÄ Running fix from browser console...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô
  const report = await checkDigitalRewardsStatus();
  const total = Object.values(report).reduce((sum, count) => sum + count, 0);
  
  if (total === 0) {
    console.log('‚ú® No digital rewards need fixing!');
    return;
  }
  
  // ‡∏Ç‡∏≠ confirmation
  const confirmed = confirm(`Found ${total} digital rewards to fix. Continue?`);
  if (!confirmed) {
    console.log('‚ùå Fix cancelled by user');
    return;
  }
  
  // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const result = await fixDigitalRewardsStatus();
  
  if (result.success) {
    console.log(`üéâ Successfully fixed ${result.fixed} items!`);
    alert(`Fixed ${result.fixed} digital rewards successfully!`);
  } else {
    console.error(`üí• Fix failed: ${result.error}`);
    alert(`Fix failed: ${result.error}`);
  }
}

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÉ‡∏ô Admin Panel
export async function adminRunFix() {
  return await fixDigitalRewardsStatus();
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô browser console
if (typeof window !== 'undefined') {
  (window as any).fixDigitalRewards = runFixFromConsole;
  (window as any).checkDigitalRewards = checkDigitalRewardsStatus;
}